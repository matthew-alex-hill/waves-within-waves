#include "wave_generation.h"

static wave_output getValue(wave_value *waveValue, clock time) {
  if (waveValue->isValue) {
    return waveValue->content.value;
  } else {
    Wave *nested = (Wave *) waveValue->content.nested_wave;
    return sampleWave(nested, time);
  }
}

wave_output sampleWave(Wave *wave, clock time) {
  wave_output base, frequency, amplitude, phase;

  //sets wave values to their values at the current time
  base = getValue(&wave->base, time);
  frequency = getValue(&wave->frequency, time);
  amplitude = getValue(&wave->amplitude, time);
  phase = getValue(&wave->phase, time);
  
  //TODO: add these once implementation is available
  //wave_output attack, decay, sustain, release;

  //creates a new wave with the values at the current moment of time
  Wave instanceWave;
  instanceWave.shape = wave->shape;
  instanceWave.base.isValue = 1;
  instanceWave.base.content.value = base;
  

  return sampleStandardWave(&instanceWave);
}
 
wave_output sampleStandardWave(Wave *wave) {
  return 0;
}
